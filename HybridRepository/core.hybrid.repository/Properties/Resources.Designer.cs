//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace core.hybrid.repository.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("core.hybrid.repository.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [master]
        ///
        ///IF NOT EXISTS(SELECT * FROM sys.databases WHERE name = &apos;HybridRepoDb&apos;)
        ///    BEGIN
        ///        CREATE DATABASE [HybridRepoDb]
        ///    END.
        /// </summary>
        internal static string CreateDatabase {
            get {
                return ResourceManager.GetString("CreateDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [HybridRepoDb]
        ///
        ///IF NOT EXISTS (SELECT * FROM sysobjects WHERE name=&apos;Test&apos; and xtype=&apos;U&apos;)
        ///BEGIN
        ///    CREATE TABLE Test (
        ///        Id uniqueidentifier PRIMARY KEY,
        ///        Name VARCHAR(100)
        ///    )
        ///END.
        /// </summary>
        internal static string CreateTable {
            get {
                return ResourceManager.GetString("CreateTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MERGE [dbo].[Test] WITH (HOLDLOCK) 
        ///AS TARGET USING ( VALUES (NEWID(), &apos;Name test 1&apos;))
        ///AS SOURCE (Id, Name) 
        ///ON TARGET.Name = SOURCE.Name  
        ///WHEN NOT MATCHED BY TARGET THEN 
        ///	INSERT (Id, Name) 
        ///	values(Source.Id, Source.Name) 
        ///WHEN MATCHED THEN 
        ///	UPDATE SET TARGET.Name = SOURCE.Name; 
        ///
        ///MERGE [dbo].[Test] WITH (HOLDLOCK) 
        ///AS TARGET USING ( VALUES (NEWID(), &apos;Name test 2&apos;))
        ///AS SOURCE (Id, Name) 
        ///ON TARGET.Name = SOURCE.Name  
        ///WHEN NOT MATCHED BY TARGET THEN 
        ///	INSERT (Id, Name) 
        ///	values(Source.Id [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitialSeed {
            get {
                return ResourceManager.GetString("InitialSeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ORDER BY 1
        ///OFFSET @page ROWS
        ///FETCH NEXT @registers ROWS ONLY.
        /// </summary>
        internal static string Offset {
            get {
                return ResourceManager.GetString("Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT 
        ///	[Id],
        ///	[Name]
        ///  FROM [dbo].[Test]
        /// WHERE Name LIKE @name.
        /// </summary>
        internal static string SelectByName {
            get {
                return ResourceManager.GetString("SelectByName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT 
        ///	[Id],
        ///	[Name]
        ///  FROM [dbo].[Test].
        /// </summary>
        internal static string SelectTests {
            get {
                return ResourceManager.GetString("SelectTests", resourceCulture);
            }
        }
    }
}
